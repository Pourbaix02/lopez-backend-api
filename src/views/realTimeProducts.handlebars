<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página de Productos en Tiempo Real</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="container">
        <h1>{{title}}</h1>
        
        <div class="filters">
            <select id="categoryFilter" onchange="applyFilters()">
                <option value="">Todas las categorías</option>
                <option value="available">Disponibles</option>
                <option value="Electrónica">Electrónica</option>
                <option value="Ropa">Ropa</option>
                <option value="Hogar">Hogar</option>
                <option value="Deportes">Deportes</option>
            </select>
            
            <select id="sortOrder" onchange="applyFilters()">
                <option value="">Sin ordenar</option>
                <option value="asc">Precio: Menor a Mayor</option>
                <option value="desc">Precio: Mayor a Menor</option>
            </select>
        </div>

        <!-- Formulario de creación -->
        <div class="form-container">
            <h2>Agregar Nuevo Producto</h2>
            <form id="productForm" class="product-form">
                <div class="form-row">
                    <div class="form-group half">
                        <label for="title">Título</label>
                        <input type="text" id="title" name="title" required class="form-input">
                    </div>
                    <div class="form-group half">
                        <label for="code">Código</label>
                        <input type="text" id="code" name="code" required class="form-input">
                    </div>
                </div>

                <div class="form-group">
                    <label for="description">Descripción</label>
                    <textarea id="description" name="description" required class="form-input"></textarea>
                </div>

                <div class="form-row">
                    <div class="form-group half">
                        <label for="price">Precio</label>
                        <input type="number" id="price" name="price" step="0.01" required class="form-input">
                    </div>
                    <div class="form-group half">
                        <label for="stock">Stock</label>
                        <input type="number" id="stock" name="stock" required class="form-input">
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group half">
                        <label for="category">Categoría</label>
                        <input type="text" id="category" name="category" required class="form-input">
                    </div>
                    <div class="form-group half">
                        <label for="thumbnail">Ruta de imagen</label>
                        <input type="text" id="thumbnail" name="thumbnail" class="form-input">
                    </div>
                </div>

                <button type="submit" class="btn-submit">Crear Producto</button>
            </form>
        </div>

        <!-- Lista de productos -->
        <div id="productList" class="products-grid">
            {{#if products.length}}
                {{#each products}}
                    <div class="product-card" id="product-{{this._id}}">
                        <h2>{{this.title}}</h2>
                        <p class="description">{{this.description}}</p>
                        <p class="price">Precio: ${{this.price}}</p>
                        <p class="stock">Stock: {{this.stock}}</p>
                        <p class="category">Categoría: {{this.category}}</p>
                        <p class="code">Código: {{this.code}}</p>
                        {{#if this.thumbnail}}
                            <p class="thumbnail">URL Imagen: {{this.thumbnail}}</p>
                        {{/if}}
                        <button onclick="deleteProduct('{{this._id}}')" class="delete-btn">Eliminar</button>
                    </div>
                {{/each}}
            {{else}}
                <p>No hay productos disponibles.</p>
            {{/if}}
        </div>

        {{#if pagination}}
            <div class="pagination">
                {{#if pagination.hasPrevPage}}
                    <a href="{{pagination.prevLink}}" class="page-link">Anterior</a>
                {{/if}}
                
                <span class="page-info">Página {{pagination.page}} de {{pagination.totalPages}}</span>
                
                {{#if pagination.hasNextPage}}
                    <a href="{{pagination.nextLink}}" class="page-link">Siguiente</a>
                {{/if}}
            </div>
        {{/if}}

        <a href="/home">Volver a la vista tradicional</a>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        // Manejar el envío del formulario
        document.getElementById('productForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            try {
                const formData = {
                    title: document.getElementById('title').value,
                    description: document.getElementById('description').value,
                    price: parseFloat(document.getElementById('price').value),
                    code: document.getElementById('code').value,
                    stock: parseInt(document.getElementById('stock').value),
                    category: document.getElementById('category').value,
                    thumbnail: document.getElementById('thumbnail').value
                };

                const response = await fetch('/api/products', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.status === 'success') {
                    socket.emit('newProduct', result.payload);
                    e.target.reset();
                } else {
                    alert('Error al crear el producto: ' + result.error);
                }
            } catch (error) {
                alert('Error al crear el producto: ' + error.message);
            }
        });

        // Actualizar lista de productos
        socket.on('updateProducts', (products) => {
            const productList = document.getElementById('productList');
            productList.innerHTML = products.length ? products.map(product => `
                <div class="product-card" id="product-${product._id}">
                    <h2>${product.title}</h2>
                    <p class="description">${product.description}</p>
                    <p class="price">Precio: $${product.price}</p>
                    <p class="stock">Stock: ${product.stock}</p>
                    <p class="category">Categoría: ${product.category}</p>
                    <p class="code">Código: ${product.code}</p>
                    ${product.thumbnail ? `<p class="thumbnail">URL Imagen: ${product.thumbnail}</p>` : ''}
                    <button onclick="deleteProduct('${product._id}')" class="delete-btn">Eliminar</button>
                </div>
            `).join('') : '<p>No hay productos disponibles.</p>';
        });

        // Función para eliminar producto
        async function deleteProduct(id) {
            try {
                const response = await fetch(`/api/products/${id}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    socket.emit('deleteProduct', id);
                } else {
                    alert('Error al eliminar el producto');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al eliminar el producto');
            }
        }

        function applyFilters() {
            const category = document.getElementById('categoryFilter').value;
            const sort = document.getElementById('sortOrder').value;
            const currentUrl = new URL(window.location.href);
            
            if (category) currentUrl.searchParams.set('query', category);
            else currentUrl.searchParams.delete('query');
            
            if (sort) currentUrl.searchParams.set('sort', sort);
            else currentUrl.searchParams.delete('sort');
            
            window.location.href = currentUrl.toString();
        }
    </script>

    <style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .form-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 30px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
    }

    .form-group {
        flex: 1;
        margin-bottom: 15px;
    }

    .form-input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .btn-submit {
        background-color: #2c5282;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
    }

    .filters {
        margin-bottom: 20px;
        display: flex;
        gap: 10px;
    }

    .filters select {
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .product-card {
        background-color: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .delete-btn {
        background-color: #dc2626;
        color: white;
        border: none;
        padding: 8px;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
        margin-top: 10px;
    }

    h1, h2 {
        color: #2c5282;
        margin-bottom: 20px;
    }

    .description {
        color: #666;
        margin: 10px 0;
    }

    .price {
        font-weight: bold;
        color: #2c5282;
    }

    .pagination {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 10px;
        align-items: center;
    }

    .page-link {
        padding: 8px 16px;
        background-color: #2c5282;
        color: white;
        text-decoration: none;
        border-radius: 4px;
    }

    .page-info {
        color: #4a5568;
    }
    </style>
</body>
</html>
