<div class="container">
    <h1>Productos</h1>
    
    <div class="filters">
        <select id="categoryFilter" onchange="applyFilters()">
            <option value="">Todas las categorías</option>
            <option value="available">Disponibles</option>
        </select>
        
        <select id="sortOrder" onchange="applyFilters()">
            <option value="">Sin ordenar</option>
            <option value="asc">Precio: Menor a Mayor</option>
            <option value="desc">Precio: Mayor a Menor</option>
        </select>
    </div>

    <div class="products-grid">
        {{#if products.length}}
            {{#each products}}
                <div class="product-card">
                    <h2>{{this.title}}</h2>
                    <p class="description">{{this.description}}</p>
                    <p class="price">Precio: ${{this.price}}</p>
                    <p class="stock">Stock: {{this.stock}}</p>
                    <p class="category">Categoría: {{this.category}}</p>
                    <div class="product-actions">
                        <a href="/products/{{this._id}}" class="btn-details">Ver Detalles</a>
                        <button onclick="addToCart('{{this._id}}')" class="btn-add-cart">
                            Agregar al Carrito
                        </button>
                    </div>
                </div>
            {{/each}}
        {{else}}
            <p>No hay productos disponibles.</p>
        {{/if}}
    </div>

    {{#if pagination}}
    <div class="pagination">
        {{#if pagination.hasPrevPage}}
            <a href="{{pagination.prevLink}}" class="page-link">Anterior</a>
        {{/if}}
        
        <span class="page-info">Página {{pagination.page}} de {{pagination.totalPages}}</span>
        
        {{#if pagination.hasNextPage}}
            <a href="{{pagination.nextLink}}" class="page-link">Siguiente</a>
        {{/if}}
    </div>
    {{/if}}
</div>

<style>
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}
.filters {
    margin-bottom: 20px;
    display: flex;
    gap: 10px;
}
.products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
}
.product-card {
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.product-actions {
    display: flex;
    gap: 10px;
    margin-top: 10px;
}
.btn-details, .btn-add-cart {
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    text-decoration: none;
    text-align: center;
}
.btn-details {
    background-color: #4a5568;
    color: white;
}
.btn-add-cart {
    background-color: #2c5282;
    color: white;
    border: none;
}
.pagination {
    margin-top: 20px;
    display: flex;
    justify-content: center;
    gap: 10px;
    align-items: center;
}
.page-link {
    padding: 8px 16px;
    background-color: #2c5282;
    color: white;
    text-decoration: none;
    border-radius: 4px;
}
</style>

<script>
function applyFilters() {
    const category = document.getElementById('categoryFilter').value;
    const sort = document.getElementById('sortOrder').value;
    const currentUrl = new URL(window.location.href);
    
    if (category) currentUrl.searchParams.set('query', category);
    else currentUrl.searchParams.delete('query');
    
    if (sort) currentUrl.searchParams.set('sort', sort);
    else currentUrl.searchParams.delete('sort');
    
    window.location.href = currentUrl.toString();
}

async function addToCart(productId) {
    try {
        let cartId = localStorage.getItem('cartId');
        
        if (!cartId) {
            const response = await fetch('/api/carts', {
                method: 'POST'
            });
            const result = await response.json();
            if (!result.payload._id) {
                throw new Error('Error al crear el carrito');
            }
            cartId = result.payload._id;
            localStorage.setItem('cartId', cartId);
        }

        const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ quantity: 1 })
        });

        if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        
        if (result.status === 'success') {
            alert('Producto agregado al carrito exitosamente');
        } else {
            throw new Error(result.error || 'Error al agregar al carrito');
        }
    } catch (error) {
        console.error('Error completo:', error);
        alert('Error al agregar al carrito: ' + error.message);
    }
}
</script> 